#include <iostream>
#include <mutex>
#include <condition_variable>
#include <thread>
#include <vector>
#include <random>
#include <chrono>

class BankAccount {
private:
    int balance;
    std::mutex mtx;
    std::condition_variable cv;

public:
    BankAccount() : balance(0) {}

    // Deposit money
    void deposit(int amount, int customer_id) {
        std::lock_guard<std::mutex> lock(mtx);
        balance += amount;
        std::cout << "Customer " << customer_id << " deposited $ " << amount << ". New Balance: $ "<< balance << "\n";
        cv.notify_all();
    }

    // Withdraw money
    void withdraw(int amount, int c) {
        std::unique_lock<std::mutex> lock(mtx);
        cv.wait(lock, [this, amount]() { return balance >= amount; });
        balance -= amount;
        std::cout << "Withdrew: " << amount << ", New Balance: " << balance << std::endl;
    }

    int getBalance() {
        std::lock_guard<std::mutex> lock(mtx);
        return balance;
    }
};

void customerTransaction(BankAccount &account, int customerId) {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> dist(1, 100);

    for (int i = 0; i < 5; ++i) {
        int action = dist(gen) % 2;
        int amount = dist(gen);

        if (action == 0) {
            std::cout << "Customer " << customerId << " is depositing: " << amount << std::endl;
            account.deposit(amount);
        } else {
            std::cout << "Customer " << customerId << " is withdrawing: " << amount << std::endl;
            account.withdraw(amount);
        }

        std::this_thread::sleep_for(std::chrono::milliseconds(dist(gen) % 100));
    }
}

int main() {
    BankAccount account;

    const int numCustomers = 3; // Number of customer threads
    std::vector<std::thread> threads;

    for (int i = 0; i < numCustomers; ++i) {
        threads.emplace_back(customerTransaction, std::ref(account), i + 1);
    }

    for (auto &t : threads) {
        t.join();
    }

    std::cout << "Final Balance: " << account.getBalance() << std::endl;

    return 0;
}
